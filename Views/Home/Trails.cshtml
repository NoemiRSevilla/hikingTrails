@using hiking
<link rel="stylesheet" href="~/css/site.css"/>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

<body>
    <input id="pac-input" class="controls form-control col-6" type="text" placeholder="Search Box">
    <div id="map" ></div>
    <div id="hikingresults" class="container overflow-auto pad">
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.js">
    </script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"
  integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU="
  crossorigin="anonymous"></script>
  <script
  src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"
  integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU="
  crossorigin="anonymous"></script>

    <script>
      // This example adds a search box to a map, using the Google Place Autocomplete
      // feature. People can enter geographical searches. The search box will return a
      // pick list containing a mix of places and predicted search terms.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 41.886008, lng: -87.6235219},
          zoom: 13,
          mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(50, 50)
            };

            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            <!-- get .lat() and .lng() and shove into API request -->
            console.log(place.geometry.location.lat());
            var latitude = place.geometry.location.lat();
            var longitude = place.geometry.location.lng();
            
            async function apiGetAll () {
              try {
                var resp = await fetch('https://www.hikingproject.com/data/get-trails?lat=' + latitude + '&lon=' + longitude + '&key=200600399-a9a827ab2b79c5ff46c5d9c3ff28936b')
                var data = await resp.json();
                $("#hikingresults").html("");
                var info = data.trails
                for (var x = 0; x < info.length; x++)
                {
                  var backslashes = data.trails[x].imgSqSmall
                  var imgURL = backslashes.replace("\\", "");

                  var smMedBackslash = data.trails[x].imgSmallMed
                  var smMedURL = smMedBackslash.replace("\\", "");

                  var showPageSlash = data.trails[x].url
                  var showPageURL = showPageSlash.replace("\\", "");

                  var myLatLng = {lat: data.trails[x].latitude, lng: data.trails[x].longitude}
                  markers.push(new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name,
                    position: myLatLng,
                    icon: data.trails[x].imgSqSmall
                  })),
                  $("#hikingresults").append(
                    '<div class="card-group">'
                  )
                    $("#hikingresults").append(
                    '<div class="card-group">'
                    )
                      $("#hikingresults").append(
                        '<img src="' + smMedURL + '" class="card-img-top" alt="' + place.name + '" height="140px" width="400px">'
                      )
                      $("#hikingresults").append(
                        '<div class="card-body>'
                      )
                        $("#hikingresults").append(
                          '<h5 class="card-title"><a href="' + showPageURL + '">' + data.trails[x].name + '</a></h5>'
                        )
                        $("#hikingresults").append(
                          '<p class="card-text">' + data.trails[x].summary + '</p>'
                        )
                      $("#hikingresults").append(
                        '</div>'
                      )
                      $("#hikingresults").append(
                        '<div class="card-footer">'
                      )
                        $("#hikingresults").append(
                          '<ul><small class="text-muted">•' + data.trails[x].length + ' mi • ' + data.trails[x].type + ' • '+ data.trails[x].ascent +' ft Ascent</small><ul>'
                        )
                      $("#hikingresults").append(
                        '</div>'
                      )
                    $("#hikingresults").append(
                    '</div>'
                    )
                  $("#hikingresults").append(
                    '</div>'
                  )
                }
                  return info;
              }
              catch (error){
                console.log(error);
              }
            }
            apiGetAll();
            
            
            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }

    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDFbGNmXKLwZV6NqhluyzrGQT99zeUCg6w
&libraries=places&callback=initAutocomplete" async defer>
    </script>
    
    <script src="~/js/script.js">
    </script>
</body>